# -*- coding: utf-8 -*-
"""Emotion Recognition from Speech.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bYVjWnFHR-eaztAQdlaNx6C9lV7FVB1k

Download & Extract the Dataset
"""

!wget "https://zenodo.org/record/1188976/files/Audio_Speech_Actors_01-24.zip?download=1" -O Audio_Speech_Actors_01-24.zip

import zipfile
with zipfile.ZipFile("Audio_Speech_Actors_01-24.zip", 'r') as zip_ref:
    zip_ref.extractall("/content/emotion_dataset")
print("‚úÖ Dataset Extracted!")

"""Install Required Libraries"""

!pip install librosa soundfile resampy numpy scikit-learn matplotlib tensorflow

"""Feature Extraction (MFCCs)"""

import librosa
import numpy as np
import os

emotion_map = {
    '01': 'neutral', '02': 'calm', '03': 'happy', '04': 'sad',
    '05': 'angry', '06': 'fearful', '07': 'disgust', '08': 'surprised'
}

def extract_features(file_path, max_len=174):
    audio, sr = librosa.load(file_path, sr=None)  # avoids resampy issues
    mfcc = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=40)
    pad_width = max_len - mfcc.shape[1]
    if pad_width > 0:
        mfcc = np.pad(mfcc, ((0, 0), (0, pad_width)), mode='constant')
    else:
        mfcc = mfcc[:, :max_len]
    return mfcc

X, y = [], []

for root, _, files in os.walk("/content/emotion_dataset"):
    for file in files:
        if file.endswith(".wav"):
            file_path = os.path.join(root, file)
            emotion_code = file.split("-")[2]
            label = emotion_map.get(emotion_code)
            if label:
                features = extract_features(file_path)
                X.append(features)
                y.append(label)

X = np.array(X)
y = np.array(y)

print("‚úÖ Features extracted:", X.shape)
print("üéØ Labels found:", set(y))

"""Encode Labels & Split Data"""

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

le = LabelEncoder()
y_encoded = to_categorical(le.fit_transform(y))

X = X.reshape(X.shape[0], X.shape[1], X.shape[2], 1)  # for CNN input

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

print("üìê Train shape:", X_train.shape)
print("üìê Test shape:", X_test.shape)

"""Build and Train CNN Model"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(40, 174, 1)),
    MaxPooling2D(2,2),
    Dropout(0.3),

    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Dropout(0.3),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(y_train.shape[1], activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

"""Train the Model"""

history = model.fit(X_train, y_train, epochs=30, batch_size=32, validation_data=(X_test, y_test))

"""Evaluate and Visualize"""

import matplotlib.pyplot as plt

# Accuracy & Loss
plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train')
plt.plot(history.history['val_accuracy'], label='Val')
plt.title("Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train')
plt.plot(history.history['val_loss'], label='Val')
plt.title("Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

plt.tight_layout()
plt.show()

"""Final Accuracy"""

loss, accuracy = model.evaluate(X_test, y_test)
print(f"‚úÖ Final Test Accuracy: {accuracy * 100:.2f}%")